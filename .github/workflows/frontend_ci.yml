# week08/.github/workflows/frontend_ci.yml
name: Frontend CI - Build & Push Image

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend_ci.yml'

# OIDC requires this
permissions:
  id-token: write
  contents: read

# Global env
env:
  # Put login server here, e.g. myregistry.azurecr.io
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  # Unique, traceable tag
  IMAGE_TAG: sha-${{ github.sha }}

jobs:
  build_and_push_frontend:
    runs-on: ubuntu-latest

    # IMPORTANT: this must match the environment you used in Azure federated credentials
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # OIDC login (no client secret / no creds JSON)
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Quick sanity: show account (helps with screenshots & debugging)
      - name: Sanity check
        run: az account show

      # ACR login: --name expects the REGISTRY NAME, not the login server
      - name: Login to Azure Container Registry
        run: |
          ACR_NAME="${ACR_LOGIN_SERVER%%.*}"   # strip .azurecr.io
          az acr login --name "$ACR_NAME"

      # Build & push with immutable tag AND latest (optional)
      - name: Build and Push Frontend Image
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:${IMAGE_TAG} ./frontend
          docker tag  $ACR_LOGIN_SERVER/frontend:${IMAGE_TAG} $ACR_LOGIN_SERVER/frontend:latest
          docker push $ACR_LOGIN_SERVER/frontend:${IMAGE_TAG}
          docker push $ACR_LOGIN_SERVER/frontend:latest

      - name: Logout from Azure
        if: always()
        run: az logout
